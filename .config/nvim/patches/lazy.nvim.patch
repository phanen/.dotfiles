diff --git a/lua/lazy/core/config.lua b/lua/lazy/core/config.lua
index 60934a0..7214899 100644
--- a/lua/lazy/core/config.lua
+++ b/lua/lazy/core/config.lua
@@ -158,6 +158,7 @@ M.defaults = {
     -- only generate markdown helptags for plugins that dont have docs
     skip_if_doc_exists = true,
   },
+  docs_root = vim.fn.stdpath("state") .. "/lazy/docs",
   state = vim.fn.stdpath("state") .. "/lazy/state.json", -- state info for checker and other things
   build = {
     -- Plugins can provide a `build.lua` file that will be executed when the plugin is installed
@@ -221,8 +222,10 @@ function M.setup(opts)
   end
   M.options.lockfile = Util.norm(M.options.lockfile)
   M.options.readme.root = Util.norm(M.options.readme.root)
+  M.options.docs_root = Util.norm(M.options.docs_root)
 
   vim.fn.mkdir(M.options.root, "p")
+  vim.fn.mkdir(M.options.docs_root, "p")
 
   if M.options.performance.reset_packpath then
     vim.go.packpath = vim.env.VIMRUNTIME
@@ -244,6 +247,7 @@ function M.setup(opts)
     vim.opt.rtp:append(path)
   end
   vim.opt.rtp:append(M.options.readme.root)
+  vim.opt.rtp:append(M.options.docs_root)
 
   -- disable plugin loading since we do all of that ourselves
   vim.go.loadplugins = false
diff --git a/lua/lazy/help.lua b/lua/lazy/help.lua
index a33e808..76b4290 100644
--- a/lua/lazy/help.lua
+++ b/lua/lazy/help.lua
@@ -37,6 +37,21 @@ function M.index(plugin)
   return tags
 end
 
+function M.cache(plugin)
+  local docs = vim.fn.expand(plugin.dir .. "/doc")
+  if Util.file_exists(docs) then
+    Util.ls(docs, function(path, name, type)
+      if type == "file" then
+        if name == "tags" then
+          vim.loop.fs_unlink(path)
+        elseif name:sub(-4) == ".txt" then
+          vim.loop.fs_copyfile(path, Config.options.docs_root .. "/doc/" .. name)
+        end
+      end
+    end)
+  end
+end
+
 function M.update()
   if Config.plugins["lazy.nvim"] then
     vim.cmd.helptags(Config.plugins["lazy.nvim"].dir .. "/doc")
@@ -46,25 +61,36 @@ function M.update()
   end
 
   local docs = Config.options.readme.root .. "/doc"
+  local docs_cache = Config.options.docs_root .. "/doc"
   vim.fn.mkdir(docs, "p")
+  vim.fn.mkdir(docs_cache, "p")
 
   Util.ls(docs, function(path, name, type)
     if type == "file" and name:sub(-2) == "md" then
       vim.loop.fs_unlink(path)
     end
   end)
+
+  Util.ls(docs_cache, function(path, _, _)
+    if type == "file" then
+      vim.loop.fs_unlink(path)
+    end
+  end)
+
   ---@type {file:string, tag:string, line:string}[]
   local tags = {}
   for _, plugin in pairs(Config.plugins) do
     for key, tag in pairs(M.index(plugin)) do
       tags[key] = tag
     end
+    M.cache(plugin)
   end
   local lines = { [[!_TAG_FILE_ENCODING	utf-8	//]] }
   Util.foreach(tags, function(_, tag)
     table.insert(lines, ("%s\t%s\t/%s"):format(tag.tag, tag.file, tag.line))
   end, { case_sensitive = true })
   Util.write_file(docs .. "/tags", table.concat(lines, "\n"))
+  vim.cmd.helptags(docs_cache)
 end
 
 return M
diff --git a/lua/lazy/manage/init.lua b/lua/lazy/manage/init.lua
index 897bdbf..e2842b5 100644
--- a/lua/lazy/manage/init.lua
+++ b/lua/lazy/manage/init.lua
@@ -82,7 +82,7 @@ function M.install(opts)
     pipeline = {
       "git.clone",
       { "git.checkout", lockfile = opts.lockfile },
-      "plugin.docs",
+      -- "plugin.docs",
       "wait",
       "plugin.build",
     },
@@ -105,7 +105,7 @@ function M.update(opts)
       "git.fetch",
       "git.status",
       { "git.checkout", lockfile = opts.lockfile },
-      "plugin.docs",
+      -- "plugin.docs",
       "wait",
       "plugin.build",
       { "git.log", updated = true },
