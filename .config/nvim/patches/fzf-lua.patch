diff --git a/lua/fzf-lua/core.lua b/lua/fzf-lua/core.lua
index 3b8debc..f0fcac7 100644
--- a/lua/fzf-lua/core.lua
+++ b/lua/fzf-lua/core.lua
@@ -1099,10 +1099,6 @@ M.convert_reload_actions = function(reload_cmd, opts)
       end
     end
   end
-  if has_reload and reload_cmd and type(reload_cmd) ~= "string" then
-    utils.warn(
-      "actions with `reload` are only supported with string commands, using resume fallback")
-  end
   if fallback then
     -- for fallback, conversion to "old-style" actions is sufficient
     return opts
diff --git a/lua/fzf-lua/providers/lsp.lua b/lua/fzf-lua/providers/lsp.lua
index 4d41a74..e33a568 100644
--- a/lua/fzf-lua/providers/lsp.lua
+++ b/lua/fzf-lua/providers/lsp.lua
@@ -899,7 +899,7 @@ end
 -- TODO: not needed anymore, it seems that `vim.lsp.buf.code_action` still
 -- uses the old `vim.lsp.diagnostic` API, we will do the same until neovim
 -- stops using this API
---[[ local function get_line_diagnostics(_)
+local function get_line_diagnostics(_)
   if not vim.diagnostic then
     return vim.lsp.diagnostic.get_line_diagnostics()
   end
@@ -926,7 +926,7 @@ end
       } }
       -- Must return an empty table or some LSP servers fail (#707)
       or {}
-end ]]
+end
 
 M.code_actions = function(opts)
   opts = normalize_lsp_opts(opts, "lsp.code_actions")
@@ -958,7 +958,7 @@ M.code_actions = function(opts)
         -- Neovim still uses `vim.lsp.diagnostic` API in "nvim/runtime/lua/vim/lsp/buf.lua"
         -- continue to use it until proven otherwise, this also fixes #707 as diagnostics
         -- must not be nil or some LSP servers will fail (e.g. ruff_lsp, rust_analyzer)
-        diagnostics = vim.lsp.diagnostic.get_line_diagnostics(core.CTX().bufnr) or {}
+        diagnostics = get_line_diagnostics(core.CTX().bufnr) or {}
       }
       return params
     end
