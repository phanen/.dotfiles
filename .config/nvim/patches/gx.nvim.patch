diff --git a/lua/gx/git.lua b/lua/gx/git.lua
index 7d47b79..2c42379 100644
--- a/lua/gx/git.lua
+++ b/lua/gx/git.lua
@@ -22,7 +22,7 @@ function M.get_remote_url(remotes, owner)
   local url = nil
   for _, remote in ipairs(remotes) do
     local exit_code, result =
-      require("gx.shell").execute("git", { "remote", "get-url", "--push", remote })
+      require("gx.shell").execute("git", { "remote", "get-url", "--no-push", remote })
     if exit_code == 0 then
       url = parse_git_output(result)
       if url then
diff --git a/lua/gx/helper.lua b/lua/gx/helper.lua
index 95d83cd..d67075c 100644
--- a/lua/gx/helper.lua
+++ b/lua/gx/helper.lua
@@ -1,17 +1,6 @@
 local M = {}
 
 -- get visual selection
-local function visual_selection_range()
-  local _, csrow, cscol, _ = unpack(vim.fn.getpos("'<"))
-  local _, cerow, cecol, _ = unpack(vim.fn.getpos("'>"))
-
-  if csrow < cerow or (csrow == cerow and cscol <= cecol) then
-    return cscol - 1, cecol
-  else
-    return cecol - 1, cscol
-  end
-end
-
 local function table_contains(tbl, x)
   local found = false
   for _, v in pairs(tbl) do
@@ -50,9 +39,9 @@ function M.cut_with_visual_mode(mode, line)
     return line
   end
 
-  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<esc>", true, false, true), "x", false)
-  local i, j = visual_selection_range()
-  return string.sub(line, i + 1, j)
+  return table
+    .concat(vim.fn.getregion(vim.fn.getpos("."), vim.fn.getpos("v"), { type = vim.fn.mode() }), "\n")
+    :gsub("\n", "")
 end
 
 -- find pattern in line and check if cursor on it
diff --git a/lua/gx/shell.lua b/lua/gx/shell.lua
index 335c396..76d8170 100644
--- a/lua/gx/shell.lua
+++ b/lua/gx/shell.lua
@@ -2,14 +2,8 @@ local shell = {}
 
 function shell.execute(command, args)
   -- TODO: This could use vim.system() in 0.10+
-  local Job = require("plenary.job")
-
-  local result, return_val = Job:new({
-    command = command,
-    args = args,
-  }):sync()
-
-  return return_val, result
+  local obj = vim.system({ command, unpack(args) }):wait()
+  return obj.code, { obj.stdout }
 end
 
 function shell.execute_with_error(command, args, url)
